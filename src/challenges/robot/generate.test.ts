import { expect, it } from "vitest";
import { generateDistanceMap, generateMaze } from "./generate";

it("generates a maze", () => {
  const maze = generateMaze(16, 16, "meow");
  expect(mazeToString(maze)).toMatchInlineSnapshot(`
    "#.###############################
    #.#...........#.......#.........#
    #.#######.###.#.#######.#####.#.#
    #.#.......#.#...#.........#...#.#
    #.#.#.#####.###.#.#########.#####
    #.#.#.#...#.#...#.#.........#...#
    #.#.###.#.#.#.###.#.###.#####.#.#
    #.#...#.#.#...#...#...#.#.....#.#
    #.###.#.#.#.###.#####.###.#####.#
    #...#.#.#.#.#.#.....#...#.#...#.#
    ###.#.#.#.#.#.#####.###.#.#.###.#
    #.#.#.#.#.#.....#...#.#...#.#...#
    #.#.#.#.#.#######.###.#####.#.#.#
    #...#.#.#...................#.#.#
    #.###.#.###################.#.###
    #.#...#...#...#.....#.......#...#
    #.#.#.###.###.#.###.#.#########.#
    #.#.#...#.#...#.#...#.....#...#.#
    #.###.#.#.#.###.#.#######.###.#.#
    #...#.#.#.#...#.#.#...........#.#
    ###.#.#.#.###.#.#.#######.#####.#
    #...#.#...#...#.#...#...#.#.....#
    #.###.#####.###.###.#.#.###.###.#
    #...#.......#...#.#.#.#.#...#...#
    ###.#######.#.###.#.#.#.#.###.###
    #.#.......#.#...#.#.#.#...#.#.#.#
    #.#######.#.###.#.#.#.#####.#.#.#
    #.....#...#.#.#.#.....#.....#.#.#
    #.###.#.###.#.#.#######.#####.#.#
    #...#...#.....#...#.....#...#...#
    ###.#############.#.#.###.#.###.#
    #.................#.#.....#.....#
    ###############################.#"
  `);
});
it("generates a maze with different seeds", () => {
  const maze = generateMaze(16, 16, "nyan");
  expect(mazeToString(maze)).toMatchInlineSnapshot(`
    "#.###############################
    #.....#.....#...#.........#.....#
    #####.#.#.#.#.#.#####.###.###.#.#
    #.....#.#.#.#.#...#...#.#...#.#.#
    #.#######.#.#.###.#.###.###.###.#
    #.#.....#.#...#...#.#.....#.....#
    #.#.#.#.#.#####.###.###.#######.#
    #.#.#.#...#.....#.....#.......#.#
    #.###.#####.#####.###.###.#####.#
    #...#.....#.#...#...#...#.....#.#
    ###.#####.#.###.###.###.###.#.#.#
    #.#.......#...#...#...#...#.#...#
    #.###########.#.#####.###.#####.#
    #.#...#.....#.#.....#.#.#.....#.#
    #.#.#.#.###.#.###.###.#.#####.###
    #.#.#.#.#.#.#...#.#.....#...#...#
    #.#.#.#.#.#.###.#.#.#####.#.###.#
    #.#.#...#.#.#...#...#.....#.....#
    #.#.#####.#.#.#######.#########.#
    #.#.......#...#.......#.#.....#.#
    #.#######.#####.#######.#.#.###.#
    #...#.....#.....#.......#.#.....#
    ###.#.#######.#######.#.#.#######
    #...#.#.......#.....#.#.#.#.....#
    #.###.#####.#####.#.###.#.###.###
    #...#.....#.#.....#.#...#...#...#
    ###.#####.#.###.###.#.#.###.#.#.#
    #...#...#.#...#.#.....#.#...#.#.#
    #.#.#.#.#.#.#.#.#######.#.#####.#
    #.#.#.#.#.#.#.#.#...#...#.......#
    #.###.#.#.###.#.#.#.###########.#
    #.....#.......#...#.............#
    ###############################.#"
  `);
});

it("generates distance map", () => {
  const maze = [
    [1, 0, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 1],
  ];
  const _ = null;
  const expectedDistanceMap = [
    [_, 8, _, _, _, _, _],
    [_, 7, 8, 9, _, 3, _],
    [_, 6, _, _, _, 2, _],
    [_, 5, 4, 3, 2, 1, _],
    [_, _, _, _, _, 0, _],
  ];
  const distanceMap = generateDistanceMap(maze);
  const result = expectedDistanceMap.map((row, i) =>
    row.map((_, j) => distanceMap.getDistance([i, j]))
  );
  return expect(result).toEqual(expectedDistanceMap);
});

function mazeToString(maze: number[][]) {
  return maze
    .map((row) => row.map((v) => (v === 1 ? "#" : ".")).join(""))
    .join("\n");
}
