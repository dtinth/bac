import { expect, it } from "vitest";
import { generateMaze } from "./generate";

it("generates a maze", () => {
  const maze = generateMaze(16, 16, "meow");
  expect(mazeToString(maze)).toMatchInlineSnapshot(`
    "#.###############################
    #...........#.........#.........#
    #.#######.#.#.#.#######.#####.#.#
    #.#.......#...#.#.........#...#.#
    #.#.#.#########.#.#########.#####
    #.#.#.#...#.#...#.#.........#...#
    #.#.###.#.#.#.###.#.###.#####.#.#
    #.#...#.#.#.#.#...#...#.#.....#.#
    #.###.#.#.#.#.#.#####.###.#####.#
    #...#.#.#.#.#.#.....#...#.#...#.#
    ###.#.#.#.#.#.#####.###.#.#.###.#
    #.#.#.#.#.#.....#...#.#...#.#...#
    #.#.#.#.#.#######.###.#####.#.#.#
    #...#.#.#...................#.#.#
    #.###.#.###################.#.###
    #.#...#...#...#.....#...#...#...#
    #.#.#.###.###.#.###.#.###.#####.#
    #.#.#...#.#...#.#...#.#...#...#.#
    #.###.#.#.#.###.#.###.#.###.#.#.#
    #...#.#.#.#...#.#.#.........#.#.#
    ###.#.#.#.###.#.#.#######.#####.#
    #...#.#...#...#.#...#...#.#.....#
    #.###.#####.###.###.#.#.###.###.#
    #...#.......#...#.#.#.#.#...#.#.#
    ###.#######.#.###.#.#.#.#.###.#.#
    #.#.......#.#...#.#.#.#...#...#.#
    #.#######.#.###.#.#.#.#####.#.#.#
    #.....#...#.#.#.#.....#.#...#.#.#
    #.###.#.###.#.#.#######.#.#.###.#
    #...#...#.....#...#...#...#.....#
    ###.#############.#.#.#.#########
    #.................#.#...........#
    ###############################.#"
  `);
});
it("generates a maze with different seeds", () => {
  const maze = generateMaze(16, 16, "nyan");
  expect(mazeToString(maze)).toMatchInlineSnapshot(`
    "#.###############################
    #...#.......#.....#...#.#...#...#
    #.#####.#.#.#.###.#.#.#.#.#.#.#.#
    #.#...#.#.#...#...#.#...#.#...#.#
    #.#.#.###.#####.###.#####.#####.#
    #...#...#.....#...#.#.......#...#
    #######.#####.###.#.#.#####.#.###
    #.....#.......#.#.#...#...#.#...#
    #.###.#########.#.###.#.#.#####.#
    #.#.......#.....#...#.#.#.....#.#
    #.#.#######.###.###.###.#####.#.#
    #.#.#...#...#.#.#...#...#.......#
    #.#.#.#.#.###.#.#.###.#########.#
    #.#.#.#.#.#...#...#.....#.....#.#
    #.#.#.#.#.###.#####.###.#.###.###
    #.#...#.#...#.....#.#.#.....#...#
    #.#####.###.#.###.#.#.#########.#
    #.....#.#...#.#.#...#.....#...#.#
    #####.#.#.###.#.#####.#####.#.#.#
    #...#.#...#.#.........#.....#...#
    ###.#.#####.###.#######.#######.#
    #...#.....#.#...#.......#...#...#
    #.#.#####.#.#.###.#######.#.#.###
    #.#.#...#.#...#...#.....#.#...#.#
    #.###.#.#.#.###.###.#.###.#####.#
    #...#.#.#.#.#...#...#.#...#...#.#
    ###.#.#.#.###.###.###.#.###.#.#.#
    #...#.#...#...#.#...#.#...#.#...#
    #.###.#####.###.###.#.###.#.###.#
    #.....#...#...#...#.#...#.#.#.#.#
    #.#####.#.###.#.#.#.#.###.#.#.#.#
    #.......#.....#.#...#.......#...#
    ###############################.#"
  `);
});

function mazeToString(maze: number[][]) {
  return maze
    .map((row) => row.map((v) => (v === 1 ? "#" : ".")).join(""))
    .join("\n");
}
